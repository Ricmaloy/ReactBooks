// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "mysql"
//   url      = env("DATABASE_URL")
// }

// model User {
//   id         String   @id @default(uuid())
//   username   String   @unique
//   name       String
//   email      String?  @unique
//   bio        String?  @db.Text
//   avatar_url String?
//   created_at DateTime @default(now())

//   accounts      Account[]
//   sessions      Session[]
//   timeIntervals UserTimeInterval[]
//   Scheduling    Scheduling[]

//   @@map("users")
// }

// model Account {
//   id                  String  @id @default(cuid())
//   user_id             String
//   type                String
//   provider            String
//   provider_account_id String
//   refresh_token       String? @db.Text
//   access_token        String? @db.Text
//   expires_at          Int?
//   token_type          String?
//   scope               String?
//   id_token            String? @db.Text
//   session_state       String?
//   user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@unique([provider, provider_account_id])
//   @@map("accounts")
// }

// model Session {
//   id            String   @id @default(cuid())
//   session_token String   @unique
//   user_id       String
//   expires       DateTime
//   user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

//   @@map("sessions")
// }

// model UserTimeInterval {
//   id                    String @id @default(uuid())
//   week_day              Int
//   time_start_in_minutes Int
//   time_end_in_minutes   Int

//   user    User   @relation(fields: [user_id], references: [id])
//   user_id String

//   @@map("user_time_intervals")
// }

// model Scheduling {
//   id           String   @id @default(uuid())
//   date         DateTime
//   name         String
//   email        String
//   observations String?
//   created_at   DateTime @default(now())
//   user         User     @relation(fields: [user_id], references: [id])
//   user_id      String

//   @@map("schedulings")
// }

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  name       String
  avatar_url String?
  created_at DateTime @default(now())

  accounts Account[]
  sessions Session[]
  ratings  Rating[]

  @@map("users")
}

model Book {
  id          String   @id @default(uuid())
  name        String
  author      String
  summary     String
  cover_url   String
  total_pages Int
  created_at  DateTime @default(now())

  categories CategoriesOnBooks[]
  ratings    Rating[]

  @@map("books")
}

model Category {
  id   String @id @default(uuid())
  name String @unique

  books CategoriesOnBooks[]

  @@map("categories")
}

model CategoriesOnBooks {
  book_id    String
  categoryId String

  book     Book     @relation(fields: [book_id], references: [id])
  category Category @relation(fields: [categoryId], references: [id])

  @@id([book_id, categoryId])
}

model Rating {
  id          String   @id @default(uuid())
  rate        Int
  description String
  created_at  DateTime @default(now())

  book    Book   @relation(fields: [book_id], references: [id])
  book_id String

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("ratings")
}

model Account {
  id                  String  @id @default(cuid())
  user_id             String
  type                String
  provider            String
  provider_account_id String
  refresh_token       String?
  access_token        String?
  expires_at          Int?
  token_type          String?
  scope               String?
  id_token            String?
  session_state       String?
  user                User    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([provider, provider_account_id])
  @@map("accounts")
}

model Session {
  id            String   @id @default(cuid())
  session_token String
  user_id       String
  expires       DateTime
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("sessions")
}
